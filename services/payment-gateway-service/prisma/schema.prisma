datasource db {
    provider = "postgresql"
    url      = env("PAYMENT_DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["windows", "linux-musl-openssl-3.0.x", "native"]
}

// =====================================
// PAYMENT PROCESSING
// =====================================

model Payment {
    id               String        @id @default(uuid())
    amount           Int // Amount in cents
    currency         String        @default("USD")
    status           PaymentStatus @default(PENDING)
    gatewayPaymentId String? // External payment gateway ID
    gatewayChargeId  String? // External charge ID
    processingFee    Int? // Processing fee in cents
    netAmount        Int? // Net amount after fees
    processedAt      DateTime?
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    // Relations (Webhook)
    webhookDeliveries WebhookDelivery[]

    @@index([status])
    @@index([gatewayPaymentId])
    @@index([gatewayChargeId])
    @@index([processedAt])
    @@map("payments")
}

// =====================================
// WEBHOOK DELIVERY SYSTEM
// =====================================

model WebhookDelivery {
    id        String                @id @default(uuid())
    paymentId String? // Reference to payment in payment service
    eventType WebhookEventType
    payload   Json
    status    WebhookDeliveryStatus @default(PENDING)
    createdAt DateTime              @default(now())
    updatedAt DateTime              @updatedAt

    // Relations
    payment Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull)

    @@index([status])
    @@index([eventType])
    @@index([createdAt])
    @@map("webhook_deliveries")
}

// =====================================
// CONFIGURATION & SETTINGS
// =====================================

model PaymentGatewayConfig {
    id               String          @id @default(uuid())
    name             String          @unique
    gatewayType      GatewayType
    isActive         Boolean         @default(true)
    isDefault        Boolean         @default(false)
    apiKey           String? // Encrypted
    secretKey        String? // Encrypted
    webhookSecret    String? // Encrypted
    sandboxMode      Boolean         @default(true)
    supportedMethods PaymentMethod[]
    settings         Json? // Gateway-specific settings
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt

    @@index([isActive])
    @@index([isDefault])
    @@map("payment_gateway_configs")
}

// =====================================
// ENUMS
// =====================================


enum PaymentStatus {
    PENDING
    PROCESSING
    SUCCEEDED
    FAILED
    CANCELLED
}

enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    BANK_TRANSFER
    DIGITAL_WALLET
    CRYPTOCURRENCY
    OTHER
}

enum GatewayType {
    STRIPE
    PAYPAL
    SQUARE
    RAZORPAY
}

enum WebhookEventType {
    PAYMENT_INTENT_CREATED
    PAYMENT_INTENT_SUCCEEDED
    PAYMENT_INTENT_FAILED
    PAYMENT_INTENT_CANCELLED
    PAYMENT_SUCCEEDED
    PAYMENT_FAILED
}

enum WebhookDeliveryStatus {
    PENDING
    DELIVERED
    FAILED
    RETRYING
    ABANDONED
}
