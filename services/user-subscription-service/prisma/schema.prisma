datasource db {
    provider = "postgresql"
    url      = env("USER_DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["windows", "linux-musl-openssl-3.0.x", "native"]
}

// =====================================
// USER MANAGEMENT
// =====================================

model User {
    id            String   @id @default(uuid())
    email         String   @unique
    name          String
    password      String
    emailVerified Boolean  @default(false)
    isActive      Boolean  @default(true)
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relations
    tokens        Token[]
    subscriptions Subscription[]

    @@index([email])
    @@index([isActive])
    @@map("users")
}

model Token {
    id         String      @id @default(uuid())
    identifier String      @unique
    reason     TokenReason
    status     TokenStatus
    expiresAt  DateTime
    userId     String
    user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt

    @@index([identifier])
    @@index([userId])
    @@index([status])
    @@map("tokens")
}

enum TokenReason {
    FORGOT_PASSWORD
    RESET_PASSWORD
    EMAIL_VERIFICATION
    CHANGE_PASSWORD
}

enum TokenStatus {
    EXPIRED
    ACTIVE
    USED
}

// =====================================
// SUBSCRIPTION MANAGEMENT
// =====================================

model Plan {
    id              String          @id @default(uuid())
    gatewayPlanId   String?         @unique
    name            String          @unique
    description     String?
    price           Int // Price in cents
    currency        String          @default("USD")
    billingInterval BillingInterval
    features        Json? // JSON array of features
    isActive        Boolean         @default(true)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt

    // Relations
    subscriptions Subscription[]

    @@index([isActive])
    @@index([price])
    @@map("plans")
}

model Subscription {
    id                 String             @id @default(uuid())
    userId             String
    planId             String
    status             SubscriptionStatus @default(PENDING)
    currentPeriodStart DateTime?
    currentPeriodEnd   DateTime?
    cancelledAt        DateTime?
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt

    // Relations
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    plan           Plan             @relation(fields: [planId], references: [id])
    webhookEvents  WebhookEvent[]
    billingHistory BillingHistory[]

    @@index([userId])
    @@index([planId])
    @@index([status])
    @@index([currentPeriodEnd])
    @@map("subscriptions")
}

model BillingHistory {
    id               String        @id @default(uuid())
    subscriptionId   String
    amount           Int // Amount in cents
    currency         String        @default("USD")
    status           BillingStatus
    gatewayPaymentId String? // External payment gateway ID
    description      String?
    billingDate      DateTime
    createdAt        DateTime      @default(now())
    updatedAt        DateTime      @updatedAt

    // Relations
    subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

    @@index([subscriptionId])
    @@index([status])
    @@index([billingDate])
    @@index([gatewayPaymentId])
    @@map("billing_history")
}

// =====================================
// WEBHOOK MANAGEMENT
// =====================================

model WebhookEvent {
    id             String           @id @default(uuid())
    subscriptionId String?
    eventType      WebhookEventType
    eventData      Json
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt

    // Relations
    subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

    @@index([eventType])
    @@index([subscriptionId])
    @@index([createdAt])
    @@map("webhook_events")
}

// =====================================
// ENUMS
// =====================================

enum BillingInterval {
    MONTHLY
    YEARLY
    WEEKLY
}

enum SubscriptionStatus {
    PENDING // Waiting for first payment
    ACTIVE // Currently active and paid
    PAST_DUE // Payment failed, grace period
    CANCELLED // Cancelled by user
    UNPAID // Payment failed, access suspended
    INCOMPLETE // Initial payment incomplete
    INCOMPLETE_EXPIRED // Initial payment expired
    PAUSED // Temporarily paused
}

enum BillingStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

enum WebhookEventType {
    PAYMENT_SUCCEEDED
    PAYMENT_FAILED
    PAYMENT_REFUNDED
    SUBSCRIPTION_CREATED
    SUBSCRIPTION_UPDATED
    SUBSCRIPTION_CANCELLED
    INVOICE_CREATED
    INVOICE_PAID
    INVOICE_FAILED
}
